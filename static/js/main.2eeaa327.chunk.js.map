{"version":3,"sources":["GlobalStyle.js","common/Container/index.js","common/Section/styled.js","common/Section/index.js","features/author/Author.js","features/tasks/TasksPage/Form/styled.js","features/tasks/tasksLocalStorage.js","features/tasks/tasksSlice.js","features/tasks/Input/index.js","features/tasks/TasksPage/Form/index.js","features/tasks/TasksPage/TaskList/styled.js","features/tasks/TasksPage/TaskList/index.js","features/tasks/TasksPage/Buttons/styled.js","features/tasks/TasksPage/Buttons/index.js","features/tasks/TasksPage/searchQueryParamName.js","features/tasks/TasksPage/Search/styled.js","features/tasks/TasksPage/Search/index.js","common/ButtonsSection/styled.js","common/ButtonsSection/index.js","common/TasksSection/styled.js","common/TasksSection/index.js","features/tasks/TasksPage/index.js","features/tasks/TaskPage/index.js","routes.js","Navigation/styled.js","Navigation/index.js","App.js","features/tasks/getExampleTasks.js","features/tasks/tasksSaga.js","rootSaga.js","store.js","reportWebVitals.js","index.js"],"names":["GlobalStyle","createGlobalStyle","Container","children","styled","section","ContainerHeader","h1","ContainerH2","h2","Paragraph","p","Section","title","subtitle","body","Author","FormContainer","form","FormButton","button","localStorageKey","saveTasksInLocalStorage","tasks","localStorage","setItem","JSON","stringify","tasksSlice","createSlice","name","initialState","parse","getItem","hideDone","reducers","addTask","payload","push","toggleHideDone","state","toggleTaskDone","action","index","findIndex","task","id","done","removeTask","splice","setAllDone","forEach","fetchExampleTasks","loading","fetchExampleTasksSuccess","fetchExampleTasksError","actions","selectTasksState","selectTasks","selectLoading","input","Form","useState","newTaskContent","setNewTaskContent","inputElement","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","content","trim","nanoid","current","focus","Input","ref","value","placeholder","onChange","target","List","ul","Item","li","hidden","css","Button","red","activeClassName","StyledNavLink","NavLink","attrs","TaskList","location","useLocation","query","URLSearchParams","search","get","useSelector","filter","toUpperCase","includes","selectTasksByQuery","map","onClick","to","ButtonsBox","div","Buttons","disabled","length","every","Wrapper","Search","history","useHistory","searchQueryParamName","searchParams","delete","set","pathname","toString","ButtonsContainer","article","ButtonsSection","TasksSection","TasksPage","TaskPage","useParams","taskId","find","getTaskById","toTask","Navigation","App","path","getExampleTasks","a","fetch","response","ok","Error","statusText","json","fetchExampleTasksHandler","saveTasksInLocalStorageHandler","tasksSaga","delay","call","exampleTasks","put","alert","select","takeLatest","type","takeEvery","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","middleware","run","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2eeaa327.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n    box-sizing: border-box;\r\n    }\r\n\r\n    *, ::after, ::before {\r\n    box-sizing: inherit;\r\n    }\r\n\r\n    body {\r\n    font-family: 'Roboto', sans-serif;\r\n    background-color: #eee;\r\n    }\r\n`;","import React from \"react\";\r\n\r\n\r\nconst Container = ({ children }) => (\r\n    <main>\r\n        {children}\r\n    </main>\r\n);\r\n\r\nexport default Container;","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.section`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    width: 50%;\r\n    margin: 0 auto;\r\n    box-shadow: 1px 1px 3px 1px #ccc;\r\n    background-color: #fff;\r\n\r\n    @media (max-width: 767px) {\r\n        width: 100%;\r\n    }\r\n`;\r\nexport const ContainerHeader = styled.h1`\r\n    align-self: flex-start;\r\n    margin-bottom: 0;\r\n    padding-left: 5px;   \r\n\r\n`;\r\n\r\nexport const ContainerH2 = styled.h2`\r\n    background-color: #fff;\r\n    width: 100%;\r\n    font-weight: normal;\r\n    padding-left: 5px;\r\n    margin-bottom: 1px;\r\n\r\n`;\r\nexport const Paragraph = styled.p`\r\n    background-color: #fff;\r\n    width: 100%;\r\n    padding-left: 5px;\r\n`;\r\n\r\n","import React from \"react\";\r\nimport { Container, ContainerHeader, ContainerH2 } from \"./styled\";\r\n\r\nconst Section = ({ title, subtitle, body }) => (\r\n    <Container>\r\n        <ContainerHeader>{title}</ContainerHeader>\r\n        <ContainerH2>{subtitle}</ContainerH2>\r\n        {body}\r\n    </Container>\r\n);\r\n\r\nexport default Section;","import React from 'react';\r\nimport Container from \"../../common/Container\";\r\nimport Section from \"../../common/Section\";\r\nimport { Paragraph } from '../../common/Section/styled';\r\n\r\n\r\n\r\nfunction Author() {\r\n    return (\r\n        <Container>\r\n            <Section title=\"O autorze\" subtitle=\"Sebastian Juszczyński\" body={<>\r\n                <Paragraph>Nazywam się Sebastian Juszczyński i pochodzę z małej miejscowości położonej w województwie\r\n                kujawsko -\r\n                pomorskim,\r\n                w pobliżu Torunia - Ostrowite.😁💪</Paragraph>\r\n                <Paragraph>W wieku 19 lat przeprowadziłem się do Olsztyna🚉, żeby studiować Ochronę Środowiska.📚</Paragraph>\r\n            </>\r\n            } />\r\n        </Container>\r\n    )\r\n};\r\nexport default Author;","import styled from \"styled-components\";\r\n\r\nexport const FormContainer = styled.form`\r\n    display: flex;\r\n    align-items: space-between;\r\n    background-color: #fff;\r\n    box-shadow: 1px 1px 3px 1px #ccc;\r\n    width: 100%;\r\n    padding: 20px 20px 20px 5px;\r\n\r\n    @media (max-width: 767px) {\r\n        flex-wrap: wrap;\r\n        width: 100%;\r\n    }\r\n`;\r\n\r\n\r\n\r\nexport const FormButton = styled.button`\r\n    background-color: teal;\r\n    color: #fff;\r\n    flex-basis: 30%;\r\n    border: none;\r\n    transition: 0.3s;\r\n\r\n    &:hover {\r\n        background-color: hsl(180, 100%, 30%);\r\n    }\r\n    @media (max-width: 767px) {\r\n        flex-basis: 100%;\r\n        padding: 10px;\r\n    }  \r\n`;","const localStorageKey = 'tasks';\r\n\r\nexport const saveTasksInLocalStorage = (tasks) =>\r\n    localStorage.setItem(localStorageKey, JSON.stringify(tasks));\r\n\r\nexport const getTasksFromLocalStorage = () => \r\n    JSON.parse(localStorage.getItem(localStorageKey)) || [];\r\n\r\n","import { createSlice } from '@reduxjs/toolkit';\r\nimport { getTasksFromLocalStorage } from './tasksLocalStorage';\r\n\r\nconst tasksSlice = createSlice({\r\n    name: 'tasks',\r\n    initialState: {\r\n        tasks: getTasksFromLocalStorage(),\r\n        hideDone: false,\r\n    },\r\n    reducers: {\r\n        addTask: ({ tasks }, { payload }) => {\r\n            tasks.push(payload);\r\n        },\r\n        toggleHideDone: state => {\r\n            state.hideDone = !state.hideDone;\r\n        },\r\n        toggleTaskDone: (state, action) => {\r\n            const index = state.tasks.findIndex(task => task.id === action.payload);\r\n            state.tasks[index].done = !state.tasks[index].done\r\n        },\r\n        removeTask: (state, action) => {\r\n            const index = state.tasks.findIndex(task => task.id === action.payload);\r\n            state.tasks.splice(index, 1);\r\n        },\r\n        setAllDone: state => {\r\n            state.tasks.forEach(task => task.done = true);\r\n        },\r\n        fetchExampleTasks: state => {\r\n            state.loading = true;\r\n        },\r\n        fetchExampleTasksSuccess: (state, { payload: tasks }) => {\r\n            state.tasks = tasks;\r\n            state.loading = false;\r\n        },\r\n        fetchExampleTasksError: (state) => {\r\n            state.loading = false;\r\n        },\r\n    },\r\n});\r\n\r\nexport const { addTask, toggleHideDone, toggleTaskDone, removeTask, setAllDone, fetchExampleTasks, fetchExampleTasksSuccess, fetchExampleTasksError } = tasksSlice.actions;\r\nexport const selectTasksState = state => state.tasks;\r\n\r\nexport const selectTasks = state => selectTasksState(state).tasks;\r\nexport const selectHideDone = (state) => state.tasks.hideDone;\r\n\r\nexport const getTaskById = (state, taskId) =>\r\n    selectTasks(state).find(({ id }) => id === taskId);\r\n    export const selectLoading = (state) => state.tasks.loading;\r\nexport const selectTasksByQuery = (state, query) => {\r\n    const tasks = selectTasks(state);\r\n\r\n    if (!query || query.trim() === \"\") {\r\n        return tasks;\r\n    }\r\n\r\n    return tasks.filter(({content}) => content.toUpperCase().includes(query.trim().toUpperCase()));\r\n}\r\n    \r\nexport default tasksSlice.reducer;\r\n","import styled from \"styled-components\";\r\n\r\nexport default styled.input`\r\n    flex-basis: 70%;\r\n    border: 2px solid #eee;\r\n    padding: 10px;\r\n    \r\n    @media (max-width: 767px) {\r\n        flex-basis: 100%;\r\n        margin-right: 0;\r\n        margin-bottom: 5px;\r\n    }    \r\n`;","import React, { useState, useRef } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { nanoid } from \"@reduxjs/toolkit\";\r\nimport { FormContainer, FormButton } from \"./styled\";\r\nimport { addTask } from \"../../tasksSlice\";\r\nimport Input from \"../../Input\";\r\n\r\n\r\nconst Form = () => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n    const inputElement = useRef(null);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        dispatch(addTask({\r\n            content: newTaskContent.trim(),\r\n            done: false,\r\n            id: nanoid(),\r\n        }));\r\n\r\n        setNewTaskContent(\"\");\r\n        inputElement.current.focus();\r\n    };\r\n\r\n    return (\r\n        <FormContainer onSubmit={onFormSubmit}>\r\n            <Input\r\n                ref={inputElement}\r\n                value={newTaskContent}\r\n                placeholder=\"Co jest do zrobienia?\"\r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n            />\r\n            <FormButton>Dodaj zadanie!</FormButton>\r\n        </FormContainer>\r\n    );\r\n};\r\n\r\nexport default Form;","import styled, { css } from \"styled-components\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nexport const List = styled.ul`\r\n    align-self: flex-start;\r\n    list-style: none;\r\n    padding: 0;\r\n    background-color: #fff;\r\n    width: 100%;\r\n    box-shadow: 1px 1px 3px 1px #ccc;\r\n    margin: 0;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    background-color: #fff;\r\n    padding: 10px 10px 0 10px;\r\n    display: flex;\r\n    align-items: center;\r\n    border-bottom: 2px solid #eee;\r\n    margin-bottom: 5px;\r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n`}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    width: 30px;\r\n    height: 30px;\r\n    background-color: hsl(120, 100%, 25%);\r\n    font-weight: bold;\r\n    margin-right: 5px;\r\n    padding: 5px;\r\n    border: none;\r\n    transition: 0.3s;\r\n\r\n    &:hover {\r\n        background-color: hsl(120, 100%, 30%);\r\n    }\r\n\r\n    ${({ red }) => red && css`\r\n        background-color: hsl(0, 100%, 40%);\r\n    \r\n    &:hover {\r\n        background-color: hsl(0, 100%, 50%);\r\n    }\r\n    `}\r\n`;\r\n\r\n\r\n\r\nconst activeClassName = \"active\";\r\n\r\nexport const StyledNavLink = styled(NavLink).attrs(() => ({\r\n    activeClassName,\r\n}))`\r\n    text-decoration: none;\r\n    color: teal;\r\n    padding: 10px 10px 3px 10px;\r\n    &.${activeClassName} {\r\n        font-weight: bold;\r\n    }    \r\n`;\r\n\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { selectTasksState, toggleTaskDone, removeTask, selectTasksByQuery } from \"../../tasksSlice\";\r\nimport { List, Item, Button, StyledNavLink } from \"./styled\";\r\n\r\n\r\nconst TaskList = () => {\r\n    const location = useLocation();\r\n    const query = (new URLSearchParams(location.search)).get(\"szukaj\");\r\n    \r\n    const { hideDone } = useSelector(selectTasksState);\r\n    const tasks = useSelector(state => selectTasksByQuery(state, query));\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <List>\r\n            {tasks.map(({ id, done, content }) => (\r\n                <Item\r\n                    key={id}\r\n                    hidden={done && hideDone}\r\n                >\r\n                    <Button\r\n                        onClick={() => dispatch(toggleTaskDone(id))}\r\n                    >\r\n                        {done ? \"✔️\" : \"\"}\r\n                    </Button>\r\n                    <Button onClick={() => dispatch(removeTask(id))} red>🗑️</Button>\r\n                    <StyledNavLink to={`/tasks/${id}`}>{content}</StyledNavLink>\r\n                </Item>\r\n            ))}\r\n        </List>\r\n    )\r\n};\r\n\r\nexport default TaskList;","import styled from \"styled-components\";\r\n\r\nexport const ButtonsBox = styled.div`\r\n    display: grid;\r\n    grid-template-columns: repeat(3, auto);\r\n    grid-gap: 20px;\r\n    justify-content: end;\r\n    margin-bottom: 10px;\r\n\r\n    @media (max-width: 767px) {\r\n        grid-template-columns: 1fr;\r\n        justify-items: center;\r\n }\r\n\r\n`;\r\nexport const Button = styled.button `\r\n    background: transparent;\r\n    color: teal;\r\n    border: none;\r\n    transition: color 0.3s;\r\n\r\n    @media (max-width: 767px) {\r\n        flex-basis: 100%;\r\n        margin: 0 0 10px 0;\r\n        text-align: left;\r\n }\r\n\r\n    &:hover {\r\n        color: hsl(180, 100%, 30%);\r\n    }\r\n`\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectTasksState, toggleHideDone, setAllDone, fetchExampleTasks, selectLoading } from \"../../tasksSlice\";\r\nimport { ButtonsBox, Button } from \"./styled\";\r\n\r\nconst Buttons = () => {\r\n    const { tasks, hideDone } = useSelector(selectTasksState);\r\n    const dispatch = useDispatch();\r\n    const loading = useSelector(selectLoading);\r\n\r\n    \r\n    return (\r\n        <ButtonsBox>\r\n            <Button onClick={() => dispatch(fetchExampleTasks())}\r\n            disabled={loading}\r\n            >\r\n                {loading ? \"Ładowanie...\" : \"Pobierz przykładowe zadania\"}\r\n            </Button>\r\n            {tasks.length > 0 && (\r\n                <>\r\n                    <Button onClick={() => dispatch(toggleHideDone())}>\r\n                        {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n        </Button>\r\n                    <Button\r\n                        onClick={() => dispatch(setAllDone())}\r\n                        disabled={tasks.every(({ done }) => done)}\r\n                    >\r\n                        Ukończ wszystkie\r\n         </Button>\r\n                </>\r\n            )}\r\n        </ButtonsBox>\r\n    )\r\n};\r\n\r\nexport default Buttons;\r\n","export default \"szukaj\";","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 1fr;\r\n    width: 100%;\r\n    padding: 20px 20px 20px 5px;\r\n`;","import React from \"react\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport Input from \"../../Input\";\r\nimport searchQueryParamName from \"../searchQueryParamName\";\r\nimport { Wrapper } from \"./styled\";\r\n\r\nfunction Search() {\r\n    const location = useLocation();\r\n    const history = useHistory();\r\n    const query = (new URLSearchParams(location.search)).get(searchQueryParamName);\r\n\r\n    const onInputChange = ({ target }) => {\r\n        const searchParams = new URLSearchParams(location.search);\r\n\r\n        if (target.value.trim() === \"\") {\r\n            searchParams.delete(searchQueryParamName);\r\n        } else {\r\n            searchParams.set((searchQueryParamName), target.value);\r\n        }\r\n        history.push(`${location.pathname}?${searchParams.toString()}`);\r\n    };\r\n\r\n    return (\r\n        <Wrapper>\r\n            <Input\r\n                placeholder=\"Filtruj zadania\"\r\n                value={query || \"\"}\r\n                onChange={onInputChange}\r\n            />\r\n        </Wrapper>\r\n    )\r\n};\r\n\r\nexport default Search;","import styled from \"styled-components\";\r\n\r\nexport const ButtonsContainer = styled.section`\r\n    display: flex;\r\n    width: 50%;\r\n    margin: 20px auto 0 auto;\r\n    background-color: #fff;\r\n    box-shadow: 1px 1px 3px 1px #ccc;\r\n\r\n    @media (max-width: 767px) {\r\n        width: 100%; \r\n    }\r\n`;\r\nexport const ContainerHeader = styled.article`\r\n    display: grid;\r\n    grid-template-columns: 1fr;\r\n    width: 100%;\r\n`;\r\nexport const ContainerH2 = styled.h2`\r\n    background-color: #fff;\r\n    padding: 20px 0 20px 5px;\r\n    margin-bottom: 1px;\r\n    margin-top: 0;\r\n    text-align: left; \r\n    \r\n    @media (max-width: 767px) {\r\n        flex-basis: 100%;\r\n    }\r\n`;","import React from \"react\";\r\nimport { ButtonsContainer, ContainerHeader, ContainerH2 } from \"./styled\"\r\n\r\n\r\n\r\nconst ButtonsSection = ({ title, body }) => (\r\n    <ButtonsContainer>\r\n        <ContainerHeader>\r\n            <ContainerH2>{title}</ContainerH2>\r\n            {body}\r\n        </ContainerHeader>\r\n    </ButtonsContainer>\r\n);\r\n\r\nexport default ButtonsSection;","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.section`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    width: 50%;\r\n    margin: 0 auto;\r\n\r\n    @media (max-width: 767px) {\r\n        width: 100%;\r\n    }\r\n`;","import React from \"react\";\r\nimport { Container } from \"./styled\";\r\n\r\nconst TasksSection = ({ body }) => (\r\n    <Container>\r\n        {body}\r\n    </Container>\r\n);\r\n\r\nexport default TasksSection;","import React from 'react';\nimport Form from \"./Form\";\nimport TaskList from \"./TaskList\";\nimport Buttons from \"./Buttons\";\nimport Search from \"./Search\";\nimport Section from \"../../../common/Section\";\nimport ButtonsSection from \"../../../common/ButtonsSection\";\nimport TasksSection from \"../../../common/TasksSection\";\nimport Container from \"../../../common/Container\";\n\nfunction TasksPage() {\n  return (\n    <Container>\n      <Section title=\"Lista zadań\" subtitle=\"Dodaj nowe zadanie\" body={<Form />} />\n      <Section subtitle=\"Wyszukiwarka\" body={<Search />} />\n      <ButtonsSection title=\"Lista zadań\" body={<Buttons />} />\n      <TasksSection body={<TaskList />} />\n    </Container>\n  );\n}\n\nexport default TasksPage;\n","import React from 'react';\r\nimport { useParams } from \"react-router-dom\";\r\nimport Section from \"../../../common/Section\";\r\nimport Container from \"../../../common/Container\";\r\nimport { useSelector } from 'react-redux';\r\nimport { getTaskById } from '../tasksSlice';\r\nimport { Paragraph } from '../../../common/Section/styled';\r\n\r\nfunction TaskPage() {\r\n    const { id } = useParams();\r\n    const task = useSelector(state => getTaskById(state, id));\r\n    return (\r\n        <Container>\r\n            <Section title=\"Szczegóły zadania\" subtitle={task ? task.content : \"Oops... Task not found! :(\"} body={!!task && (\r\n                <>\r\n                    <Paragraph>Ukończono: <strong>{task.done ? \"Tak\" : \"Nie\"}</strong></Paragraph>\r\n                </>\r\n            )} />\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default TaskPage;","export const toTasks = () => \"/tasks\";\r\nexport const toAuthor = () => \"/author\";\r\n\r\nexport const toTask = ({id} = {id: \":id\"}) => `/tasks/${id}`;","import styled from \"styled-components\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst activeClassName = \"active\";\r\n\r\nexport const StyledNavLink = styled(NavLink).attrs(() => ({\r\n    activeClassName,\r\n}))`\r\n    text-decoration: none;\r\n    color: white;\r\n    padding: 10px 10px 3px 10px;\r\n    &.${activeClassName} {\r\n        font-weight: bold;\r\n    }\r\n    &:hover {\r\n    transition: 0.5s;\r\n    filter: brightness(0.8);\r\n    border-bottom: 1px solid;\r\n  }\r\n`;\r\nexport const List = styled.ul`\r\n  background-color: teal;\r\n  list-style-type: none;\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n  padding: 15px;\r\n  margin: 0px;\r\n`;","import React from \"react\";\r\nimport { toAuthor, toTasks } from \"../routes\";\r\nimport {List, StyledNavLink} from \"./styled\";\r\n\r\nfunction Navigation() {\r\n    return (\r\n        <nav>\r\n        <List>\r\n          <li>\r\n            <StyledNavLink to={toTasks()}>Zadania</StyledNavLink>\r\n          </li>\r\n          <li>\r\n            <StyledNavLink to={toAuthor()}>O autorze</StyledNavLink>\r\n          </li>\r\n        </List>\r\n      </nav>\r\n    );\r\n};\r\n\r\nexport default Navigation;","import React from \"react\";\r\nimport { HashRouter, Switch, Route, Redirect } from \"react-router-dom\";\r\nimport Author from \"./features/author/Author\";\r\nimport TasksPage from \"./features/tasks/TasksPage\";\r\nimport TaskPage from \"./features/tasks/TaskPage\";\r\nimport Navigation from \"./Navigation\";\r\nimport { toAuthor, toTask, toTasks } from \"./routes\";\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <HashRouter>\r\n      <Navigation />\r\n      <Switch>\r\n        <Route path={toTask()}>\r\n          <TaskPage />\r\n        </Route>\r\n        <Route path={toTasks()}>\r\n          <TasksPage />\r\n        </Route>\r\n        <Route path={toAuthor()}>\r\n          <Author />\r\n        </Route>\r\n        <Route>\r\n          <Redirect to={toTasks()} />\r\n        </Route>\r\n      </Switch>\r\n\r\n    </HashRouter>\r\n  )\r\n};\r\n\r\nexport default App;","export const getExampleTasks = async () => {\r\n    const response = await fetch(\"/Todos-list-react/exampleTasks.json\");\r\n\r\n    if (!response.ok) {\r\n        new Error(response.statusText);\r\n    };\r\n\r\n    return await response.json();\r\n};","import { takeLatest, call, put, takeEvery, select, delay } from \"redux-saga/effects\";\r\nimport { getExampleTasks } from \"./getExampleTasks\";\r\nimport { saveTasksInLocalStorage } from \"./tasksLocalStorage\";\r\nimport { fetchExampleTasks, selectTasks, fetchExampleTasksSuccess, fetchExampleTasksError } from \"./tasksSlice\";\r\n\r\nfunction* fetchExampleTasksHandler() {\r\n    try {\r\n        yield delay(1000);\r\n        const exampleTasks = yield call(getExampleTasks);\r\n        yield put(fetchExampleTasksSuccess(exampleTasks));\r\n    } catch (error) {\r\n        yield put(fetchExampleTasksError())\r\n        yield call(alert, \"Something went wrong...\");\r\n    }\r\n}\r\n\r\nfunction* saveTasksInLocalStorageHandler() {\r\n    const tasks = yield select(selectTasks);\r\n    yield call(saveTasksInLocalStorage, tasks);\r\n\r\n}\r\n\r\nexport function* tasksSaga() {\r\n    yield takeLatest(fetchExampleTasks.type, fetchExampleTasksHandler);\r\n    yield takeEvery(\"*\", saveTasksInLocalStorageHandler);\r\n    ;\r\n}","import { all } from \"redux-saga/effects\";\r\nimport { tasksSaga } from \"./features/tasks/tasksSaga\";\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        tasksSaga(),\r\n    ]);\r\n}","import { configureStore } from '@reduxjs/toolkit';\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport tasksReducer from './features/tasks/tasksSlice';\r\nimport rootSaga from \"./rootSaga\";\r\n\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nconst store =  configureStore({\r\n    reducer: {\r\n        tasks: tasksReducer,\r\n    },\r\n    middleware: [sagaMiddleware],\r\n});\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport { GlobalStyle } from \"./GlobalStyle\";\nimport App from './App';\nimport store from \"./store\";\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <GlobalStyle />\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}